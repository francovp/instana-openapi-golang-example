/*
Introduction to Instana public APIs

Testing WebsiteConfigurationApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package instana

import (
	openapiclient "./openapi"
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_instana_WebsiteConfigurationApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test WebsiteConfigurationApiService CreateWebsite", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.WebsiteConfigurationApi.CreateWebsite(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WebsiteConfigurationApiService DeleteWebsite", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var websiteId string

		resp, httpRes, err := apiClient.WebsiteConfigurationApi.DeleteWebsite(context.Background(), websiteId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WebsiteConfigurationApiService GetMobileAppGeoMappingRules", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var mobileAppId string

		resp, httpRes, err := apiClient.WebsiteConfigurationApi.GetMobileAppGeoMappingRules(context.Background(), mobileAppId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WebsiteConfigurationApiService GetWebsite", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var websiteId string

		resp, httpRes, err := apiClient.WebsiteConfigurationApi.GetWebsite(context.Background(), websiteId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WebsiteConfigurationApiService GetWebsiteGeoLocationConfiguration", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var websiteId string

		resp, httpRes, err := apiClient.WebsiteConfigurationApi.GetWebsiteGeoLocationConfiguration(context.Background(), websiteId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WebsiteConfigurationApiService GetWebsiteGeoMappingRules", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var websiteId string

		resp, httpRes, err := apiClient.WebsiteConfigurationApi.GetWebsiteGeoMappingRules(context.Background(), websiteId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WebsiteConfigurationApiService GetWebsiteIpMaskingConfiguration", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var websiteId string

		resp, httpRes, err := apiClient.WebsiteConfigurationApi.GetWebsiteIpMaskingConfiguration(context.Background(), websiteId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WebsiteConfigurationApiService GetWebsites", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.WebsiteConfigurationApi.GetWebsites(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WebsiteConfigurationApiService RenameWebsite", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var websiteId string

		resp, httpRes, err := apiClient.WebsiteConfigurationApi.RenameWebsite(context.Background(), websiteId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WebsiteConfigurationApiService SetMobileAppGeoMappingRules", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var mobileAppId string

		resp, httpRes, err := apiClient.WebsiteConfigurationApi.SetMobileAppGeoMappingRules(context.Background(), mobileAppId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WebsiteConfigurationApiService SetWebsiteGeoMappingRules", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var websiteId string

		resp, httpRes, err := apiClient.WebsiteConfigurationApi.SetWebsiteGeoMappingRules(context.Background(), websiteId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WebsiteConfigurationApiService UpdateWebsiteGeoLocationConfiguration", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var websiteId string

		resp, httpRes, err := apiClient.WebsiteConfigurationApi.UpdateWebsiteGeoLocationConfiguration(context.Background(), websiteId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WebsiteConfigurationApiService UpdateWebsiteIpMaskingConfiguration", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var websiteId string

		resp, httpRes, err := apiClient.WebsiteConfigurationApi.UpdateWebsiteIpMaskingConfiguration(context.Background(), websiteId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
