/*
Introduction to Instana public APIs

Testing EventSettingsApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package instana

import (
	openapiclient "./openapi"
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_instana_EventSettingsApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test EventSettingsApiService CreateWebsiteAlertConfig", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.EventSettingsApi.CreateWebsiteAlertConfig(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EventSettingsApiService DeleteAlert", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id string

		resp, httpRes, err := apiClient.EventSettingsApi.DeleteAlert(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EventSettingsApiService DeleteAlertingChannel", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id string

		resp, httpRes, err := apiClient.EventSettingsApi.DeleteAlertingChannel(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EventSettingsApiService DeleteBuiltInEventSpecification", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var eventSpecificationId string

		resp, httpRes, err := apiClient.EventSettingsApi.DeleteBuiltInEventSpecification(context.Background(), eventSpecificationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EventSettingsApiService DeleteCustomEventSpecification", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var eventSpecificationId string

		resp, httpRes, err := apiClient.EventSettingsApi.DeleteCustomEventSpecification(context.Background(), eventSpecificationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EventSettingsApiService DeleteCustomPayloadConfiguration", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.EventSettingsApi.DeleteCustomPayloadConfiguration(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EventSettingsApiService DeleteWebsiteAlertConfig", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id string

		resp, httpRes, err := apiClient.EventSettingsApi.DeleteWebsiteAlertConfig(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EventSettingsApiService DisableBuiltInEventSpecification", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var eventSpecificationId string

		resp, httpRes, err := apiClient.EventSettingsApi.DisableBuiltInEventSpecification(context.Background(), eventSpecificationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EventSettingsApiService DisableCustomEventSpecification", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var eventSpecificationId string

		resp, httpRes, err := apiClient.EventSettingsApi.DisableCustomEventSpecification(context.Background(), eventSpecificationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EventSettingsApiService DisableWebsiteAlertConfig", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id string

		resp, httpRes, err := apiClient.EventSettingsApi.DisableWebsiteAlertConfig(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EventSettingsApiService EnableBuiltInEventSpecification", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var eventSpecificationId string

		resp, httpRes, err := apiClient.EventSettingsApi.EnableBuiltInEventSpecification(context.Background(), eventSpecificationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EventSettingsApiService EnableCustomEventSpecification", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var eventSpecificationId string

		resp, httpRes, err := apiClient.EventSettingsApi.EnableCustomEventSpecification(context.Background(), eventSpecificationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EventSettingsApiService EnableWebsiteAlertConfig", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id string

		resp, httpRes, err := apiClient.EventSettingsApi.EnableWebsiteAlertConfig(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EventSettingsApiService FindActiveWebsiteAlertConfigs", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.EventSettingsApi.FindActiveWebsiteAlertConfigs(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EventSettingsApiService FindWebsiteAlertConfig", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id string

		resp, httpRes, err := apiClient.EventSettingsApi.FindWebsiteAlertConfig(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EventSettingsApiService FindWebsiteAlertConfigVersions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id string

		resp, httpRes, err := apiClient.EventSettingsApi.FindWebsiteAlertConfigVersions(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EventSettingsApiService GetAlert", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id string

		resp, httpRes, err := apiClient.EventSettingsApi.GetAlert(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EventSettingsApiService GetAlertingChannel", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id string

		resp, httpRes, err := apiClient.EventSettingsApi.GetAlertingChannel(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EventSettingsApiService GetAlertingChannels", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.EventSettingsApi.GetAlertingChannels(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EventSettingsApiService GetAlertingChannelsOverview", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.EventSettingsApi.GetAlertingChannelsOverview(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EventSettingsApiService GetAlertingConfigurationInfos", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.EventSettingsApi.GetAlertingConfigurationInfos(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EventSettingsApiService GetAlerts", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.EventSettingsApi.GetAlerts(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EventSettingsApiService GetBuiltInEventSpecification", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var eventSpecificationId string

		resp, httpRes, err := apiClient.EventSettingsApi.GetBuiltInEventSpecification(context.Background(), eventSpecificationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EventSettingsApiService GetBuiltInEventSpecifications", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.EventSettingsApi.GetBuiltInEventSpecifications(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EventSettingsApiService GetCustomEventSpecification", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var eventSpecificationId string

		resp, httpRes, err := apiClient.EventSettingsApi.GetCustomEventSpecification(context.Background(), eventSpecificationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EventSettingsApiService GetCustomEventSpecifications", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.EventSettingsApi.GetCustomEventSpecifications(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EventSettingsApiService GetCustomPayloadConfigurations", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.EventSettingsApi.GetCustomPayloadConfigurations(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EventSettingsApiService GetCustomPayloadTagCatalog", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.EventSettingsApi.GetCustomPayloadTagCatalog(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EventSettingsApiService GetEventSpecificationInfos", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.EventSettingsApi.GetEventSpecificationInfos(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EventSettingsApiService GetEventSpecificationInfosByIds", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.EventSettingsApi.GetEventSpecificationInfosByIds(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EventSettingsApiService GetSystemRules", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.EventSettingsApi.GetSystemRules(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EventSettingsApiService PostCustomEventSpecification", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.EventSettingsApi.PostCustomEventSpecification(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EventSettingsApiService PutAlert", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id string

		resp, httpRes, err := apiClient.EventSettingsApi.PutAlert(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EventSettingsApiService PutAlertingChannel", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id string

		resp, httpRes, err := apiClient.EventSettingsApi.PutAlertingChannel(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EventSettingsApiService PutCustomEventSpecification", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var eventSpecificationId string

		resp, httpRes, err := apiClient.EventSettingsApi.PutCustomEventSpecification(context.Background(), eventSpecificationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EventSettingsApiService RestoreWebsiteAlertConfig", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id string
		var created int64

		resp, httpRes, err := apiClient.EventSettingsApi.RestoreWebsiteAlertConfig(context.Background(), id, created).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EventSettingsApiService SendTestAlerting", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.EventSettingsApi.SendTestAlerting(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EventSettingsApiService UpdateWebsiteAlertConfig", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id string

		resp, httpRes, err := apiClient.EventSettingsApi.UpdateWebsiteAlertConfig(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EventSettingsApiService UpsertCustomPayloadConfiguration", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.EventSettingsApi.UpsertCustomPayloadConfiguration(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
